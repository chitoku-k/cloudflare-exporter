name: CI Workflow
on:
  push:
    branches:
      - master
  pull_request:

defaults:
  run:
    shell: bash

jobs:
  build-linux:
    name: Build (Linux)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build
        uses: docker/build-push-action@v6
        with:
          context: .
          cache-from: type=gha
          cache-to: type=gha,mode=max
  build-windows:
    name: Build (Windows)
    strategy:
      matrix:
        target:
          - os: windows-2022
            release: ltsc2022
    runs-on: ${{ matrix.target.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Build
        run: |
          docker build \
            --file=Dockerfile.windows \
            --build-arg=WINDOWS_RELEASE=${{ matrix.target.release }} \
            .
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up reviewdog
        uses: reviewdog/action-setup@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build
        uses: docker/build-push-action@v6
        id: build
        with:
          target: dev
          cache-from: type=gha,scope=${{ github.ref_name }}-test
          cache-to: type=gha,scope=${{ github.ref_name }}-test,mode=max
          load: true
      - name: Run golangci-lint
        if: ${{ always() && steps.build.conclusion == 'success' }}
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          docker run --rm ${{ steps.build.outputs.imageid }} golangci-lint run --out-format=line-number |
            reviewdog -f=golangci-lint -reporter=github-pr-annotations -filter-mode=nofilter -fail-on-error -tee
